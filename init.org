:DOC-CONFIG:
#+property: header-args:emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+property: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+title: GNU Emacs configuration
#+startup: content indent

* Messy startup things

** Get the package system started right

In the past, I used use-package directly.

#+begin_src emacs-lisp
  ;; ;;;
  ;; ;;; start package system
  ;; ;;;
  ;; (require 'package)

  ;; (customize-set-variable 'package-enable-at-startup nil)
  ;; (customize-set-variable 'package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
  ;; 					    ("melpa" . "http://melpa.org/packages/")
  ;; 					    ))
  ;; (package-initialize)

  ;; ;; Configure the package system
  ;; (unless (package-installed-p 'use-package)
  ;;   (package-refresh-contents)
  ;;   (package-install 'use-package))

  ;; (eval-when-compile
  ;;   (require 'use-package))

  #+END_SRC

I've since moved to straight.el.

  #+begin_src emacs-lisp
  ;;
  ;; Configure straight.el package management
  ;;
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

  (straight-use-package 'diminish)
  (straight-use-package 'bind-key)
  ;;(straight-use-package 'use-package-core)
  #+end_src
  

** Control garbage collections

I'm not really doing much with this at the moment, because my startup isn't that intensive.

#+begin_src emacs-lisp
  (use-package gcmh
    :init
    (gcmh-mode 1))
#+end_src

** OS and machine dependencies

*** Define flags for platform

Not using these very much but someday they may come in handy

#+begin_src emacs-lisp
(use-package system-packages
  :custom
  (system-packages-noconfirm t))


;; so we can talk about the OS
(use-package sysinfo
  :straight (:host github :repo "p-kolacz/sysinfo")
  :config
  (defconst platform-linux-p
    (eq sysinfo-os-type 'Linux)
    "Are we running on Linux?")
  (defconst platform-macos-p
    (eq sysinfo-os-family 'macOS)
    "Are we running on macOS?")
  (defconst platform-wsl-p
    (eq sysinfo-os-type 'WSL)
    "Are we running under WSL?")
  (defconst platform-cygwin-p
    (eq sysinfo-os-type 'cygwin)
    "Are we running under cygwin?")
  (defconst platform-linux-x-p
    (and
     platform-linux-p
     (eq window-system 'x))
    "Are we running X Window System on Linux?")
  )
#+end_src


*** OS-specific things, mainly dealing with different keyboards

#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (setq mac-option-modifier 'alt)
  (setq mac-command-modifier 'meta)
  ;; map RH Option key to Super prefix (s-<key>)
  (setq ns-right-option-modifier 'super)
  (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
)
#+end_src

*** Machine-specific differences

Here we start to get into some more dirty stuff.

- Font selection
  I use Emacs on a Mac at work and a Linux box at home. There's no point trying to have the
  same fonts in both places, and a lot of the fonts on the Mac are licensed anyway (e.g. from
  MS Office). So I need to pick the right ones for each.

  Also, the sizes tend to get wacky depending on which OS, so I also have to choose them
  separately.

- Proxy management
  The work network has a MITM proxy, so I have to worry about that when I'm connected to that
  network via WPA or VPN. No such problem on the home box, obviously.

  Note that I'm just indicating grossly that a proxy check should be done in one place and not
  the other.

- File / executable paths
  Paths are of course different between macOS and Linux.
  
#+begin_src emacs-lisp
  (when (display-graphic-p)
    (setq pmw/default-font "Source Code Pro"))

  (when (string-match (system-name) "mac138104") ;; ORNL laptop
    (setq
     pmw/variable-pitch-font "Trebuchet MS"
     pmw/default-font-height (if (<= (display-pixel-width) 2500) 100 120)
     ;; OK to do a proxy check on this machine, in fact, necessary
     pmw/do-init-proxy-check t

     ;; Set some file locations
     pmw/org-directory "~/Documents/org"
     pmw/deft-directory "~/Documents/org"
     pmw/org-roam-directory "~/Documents/org"
     pmw/org-ditaa-jar-directory "/opt/local/share/java/ditaa0_9.jar"
     pmw/shell-command "/opt/local/bin/zsh"
     pmw/aspell-command "/opt/local/bin/aspell"
     ))
    
  (when (string-match (system-name) "x-wing") ;; home openSUSE
    (setq
     pmw/variable-pitch-font "DejaVu Sans"
     pmw/default-font-height 80
     pmw/do-init-proxy-check nil
     ;; Set some file locations
     pmw/org-directory "~/Documents/org"
     pmw/deft-directory "~/Documents/org"
     pmw/org-roam-directory "~/Documents/org"
     pmw/org-ditaa-jar-directory "/usr/local/share/java/ditaa0_9.jar"
     pmw/shell-command "/bin/zsh"
     pmw/aspell-command "/usr/bin/aspell"
     ))
#+end_src

*** Proxy follies

It took me forever to tease out the IP address and WiFi network interface on the Mac. I finally
defined these two functions to encapsulate the on-off separately from that.

#+begin_src emacs-lisp
(defun pmw/proxy-on ()
  "Set ORNL proxies"
  (interactive)
  (setq url-proxy-services '(("no_proxy" . "ornl\\.gov")
			     ("http" . "snowman.ornl.gov:3128")
			     ("https" . "snowman.ornl.gov:3128")))
  (setenv "GIT_SSH_COMMAND" "ssh -o ProxyCommand='nc -X connect -x snowman.ornl.gov:3128 %h %p'")
  (message "%s" "SSH proxy set for ORNL."))

(defun pmw/proxy-off ()
  "Un-set ORNL proxies"
  (interactive)
  (setq url-proxy-services nil)
  (setenv "GIT_SSH_COMMAND" nil)
  
  (message "%s" "Proxies un-set."))
#+end_src


NOW AT ORNL:
If we are on the ORNL network (IPv4 addr appears to be x.x.x.x), set proxy information

PREVIOUSLY If we are on the SRN (IPv4 addr begins with 134.253), set URL proxies

UPDATE Feb 2021: whatever was broken in (network-interface-list) and/or macOS has apparently
been fixed, so I reverted the definition of get-ip-address away from the ifconfig
shell-out. The below paragraph is no longer operative.

DISREGARD Feb 2021: For some reason (network-interface-list) has stopped working under some combination
of Mac OS X High Sierra (and later) and Emacs 25 (and later). The modification of
pmw/proxy-check below which now shells out to ifconfig compensates (although fragile
because of the cut command).

#+begin_src emacs-lisp
  (defun pmw/get-ip-address ()
    "get the IP address for the first en? interface that has a valid IP address"
    (interactive)
    ;; macOS maintains the network interface of the VPN (10.208.x.x) as long as
    ;; the VPN app is running (even when not connected but still running in menu bar).
    ;; There doesn't appear to be any reliable way to figure out whether the VPN address
    ;; is actually connected from inside Emacs. scutil --nc is no help here because
    ;; Sandia's VPN config runs outside macOS's network config and so configd has no knowledge
    ;; of it. All this is to say that trying to automatically set proxies when on the VPN may be
    ;; possible, but I can't figure out how to do it.
    (catch 'ipaddr
      (dolist (x (network-interface-list))
        (when (and (<= (length (cdr x)) 5) (string-match "en" (car x)))
  	(throw 'ipaddr (format-network-address (cdr x) t))))))

  ;; (let ((dev (if dev dev "en0")))
  ;;   (format-network-address (car (network-interface-info dev)) t)))

  (defun pmw/proxy-check ()
    "Check for SRN IP address and set proxies appropriately if found"
    (interactive)
    ;; 134.253.x.x is SRN, 10.208.x.x is NM VPN
    (when (and (pmw/get-ip-address) (string-match "134\.253" (pmw/get-ip-address)))
      (pmw/proxy-on)))

  ;;  (catch 'found
  ;;  (dolist (x (network-interface-list))

  ;; (dolist (ipaddr (split-string (shell-command-to-string "ifconfig | grep inet | grep -v inet6 | cut -d ' ' -f 2")))
  ;;      (when (string-match "134\.253" ipaddr)
  ;;	(throw 'found ipaddr))) ; break the do loop
#+end_src

** Miscellaneous private functions

#+begin_src emacs-lisp
(defun pmw/new-buffer-frame ()
  "Create a new frame with empty buffer."
  (interactive)
  (let ((buffer (generate-new-buffer "untitled")))
    (set-buffer-major-mode buffer)
    (display-buffer buffer '(display-buffer-pop-up-frame . nil))))
(global-set-key (kbd "C-c f") #'pmw/new-buffer-frame)

(defun pmw/find-alternative-file-with-sudo ()
  (interactive)
  (let ((fname (or buffer-file-name
		   dired-directory)))
    (when fname
      (if (string-match "^/sudo:pwidene@localhost:" fname)
	  (setq fname (replace-regexp-in-string
		       "^/sudo:pwidene@localhost:" ""
		       fname))
	(setq fname (concat "/sudo:pwidene@localhost:" fname)))
      (find-alternate-file fname))))
(global-set-key (kbd "C-x C-r") 'pmw/find-alternative-file-with-sudo)
#+end_src

* Use-package clauses

Everything from here on should be some form of use-package invocation.

We start with the emacs pseudo-package to do some miscellaneous settings

#+begin_src emacs-lisp
  (use-package emacs
    :init
    (setq inhibit-splash-screen t
  	inhibit-startup-message t
  	scroll-step 1
  	auto-window-vscroll nil
  	scroll-bar-mode -1
          ;;
          ;; fix for weird emacs 28.2 / Apple compiler issue
  	native-comp-driver-options (when (eq system-type 'darwin) '("-Wl,-w"))
  	)
    (setq-default cursor-type 'bar)

    (defalias 'yes-or-no-p 'y-or-n-p)
    (tool-bar-mode -1)
    (set-face-attribute 'default nil
  		      :family pmw/default-font
  		      :height pmw/default-font-height
  		      :weight 'regular)
    (set-face-attribute 'variable-pitch nil
  		      :family (when (member pmw/variable-pitch-font (font-family-list)) pmw/variable-pitch-font)
  		      :weight 'regular)
    (set-face-attribute 'fixed-pitch nil
  		      :family pmw/default-font
  		      :weight 'regular)
    (when pmw/do-init-proxy-check (pmw/proxy-check))
    :hook
    (after-init . (lambda ()
  		  (require 'server)
  		  (if (display-graphic-p)
  		      (unless (server-running-p)
  			(server-start)))))
    ;;;; the following lets you kill emacsclient buffers with C-x k instead of C-x #
    ;; (server-switch . (lambda ()
    ;; 		     (when (current-local-map)
    ;; 		       (use-local-map (copy-keymap (current-local-map))))
    ;; 		     (when server-buffer-clients
    ;; 		       (local-set-key (kbd "C-x k") 'server-edit))))
    :custom
    (ispell-program-name "/opt/local/bin/aspell")
    )
#+end_src

** Color theming, cursors, other look-and-feel

#+begin_src emacs-lisp
      (use-package sublime-themes )
      (use-package cyberpunk-theme )
      (use-package color-theme-modern 
        :config
;;        (load-theme 'cyberpunk t) ;; let auto-dark decide
        )

  (use-package auto-dark
    :ensure t
    :custom
    (auto-dark-themes '((cyberpunk) (leuven)))
    (auto-dark-allow-osascript t)
    :hook
    (auto-dark-dark-mode
     . (lambda ()
         ;; maybe do something when dark mode
         ))
    (auto-dark-light-mode
     . (lambda ()
         ;; maybe do something when light mode
         ))
    :init
    (auto-dark-mode))
         
  (use-package moody
    :disabled t
    :config
    (moody-replace-mode-line-front-space)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))

  (use-package minions
    :disabled nil
    :config (minions-mode 1))

  (use-package awesome-tray
    :straight (:host github :repo "manateelazycat/awesome-tray")
    :custom
    (awesome-tray-second-line 1)
    :config
    (awesome-tray-mode 1))
  		    

  (use-package f )
  (use-package popup )
      
    (use-package autofit-frame
      :custom
      (autofit-frames-flag nil)
      :config
      (add-hook 'after-make-frame-functions 'fit-frame)
      )

    (use-package hexrgb
      :if (display-graphic-p)
      )

      
    (use-package mwheel
      :straight (:type built-in)
      :custom
      (mouse-wheel-scroll-amount '(1
    			       ((shift) . 5)
    			       ((control))))
      (mouse-wheel-progressive-speed nil))

    (use-package pixel-scroll
      :straight (:type built-in)
      :config
      (pixel-scroll-precision-mode))



    (use-package spacious-padding
      :disabled t
      :custom
      (spacious-padding-subtle-mode-line
       `( :mode-line-active 'default
          :mode-line-inactive vertical-border))
      ;; these are default values from the package documentation
      (spacious-padding-widths
       `( :internal-border-width 15
          :header-line-width 4
          :mode-line-width 4
          :tab-width 4
          :right-divider-width 30
          :scroll-bar-width 8
          :fringe-width 8))
      :config
      (spacious-padding-mode 1)
      )


    ;; minimap

    (use-package all-the-icons
      :if (display-graphic-p)
      )

    (use-package centaur-tabs
      :disabled t
      :demand
      
      :bind
      (("C-<prior>" . centaur-tabs-backward)
       ("C-<next>" . centaur-tabs-forward))
      :custom
      (centaur-tabs-style "bar")
      (centaur-tabs-set-icons t)
      (centaur-tabs-set-bar 'under)
      (x-underline-at-descent-line t)
      (centaur-tabs-height 24)
      (centaur-tabs-set-modified-marker t)
      :config
      (centaur-tabs-mode t)
      ;;  (centaur-tabs-headline-match)
      ;;  (centaur-tabs-change-fonts "arial" 120)
      (centaur-tabs-group-by-projectile-project)
      )


    (use-package smartparens
      
      :config
      ;;;(smartparens-global-mode f)
      )


#+end_src

** LaTeX setup
#+begin_src emacs-lisp
    (use-package bibtex
      :custom
      (bibtex-dialect 'biblatex)
      )

    (use-package tex
      :straight auctex
      :custom
      (TeX-auto-save t)
      (TeX-parse-self t)
      :config
      (setq-default TeX-master nil)

      :hook (LaTeX-mode . (lambda ()
    			(auto-fill-mode)
    			(setq TeX-command-default "Latexmk"
  			  safe-local-variable-values '((TeX-master . main.tex)))
    			'turn-on-reftex
    			(visual-line-mode)
    			(set-fill-column 105)))    
      )

    (use-package auctex-latexmk
      :requires auctex
      )

    (use-package pdf-tools
    :after (tablist)
    :config
    (pdf-loader-install)
    )

  (use-package biblio
    :custom
    (biblio-crossref-user-email-address "widenerpm@ornl.gov")
    )
  (use-package citar
    :custom
    (citar-bibliography '("~/work/bib/references.bib" "~/Documents/cv/pubs/pubs.bib"))
    :hook
    (LaTeX-mode . citar-capf-setup)
    (org-mode . citar-capf-setup)
    )
  (use-package citar-embark
    :after citar embark
    :no-require
    :config (citar-embark-mode)
    )

      
#+end_src

** Completing-read packages
I have recently switched to consul / vertico / embark and friends. Previously was using Ivy and before that Helm.

Here's the old Ivy config for reference. I doubt I'll go back to it now.

#+begin_src emacs-lisp :tangle no
    ;;(use-package counsel )
  ;;(use-package swiper )
  (use-package ivy
    :disabled t
    :after (counsel swiper)
    
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "%d/%d ")
    (ivy-wrap t)
    (ivy-extra-directories nil)
    :bind
    (("C-s" . swiper)
     ("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-c g" . counsel-git)
     ("C-c j" . counsel-git-grep))
    :config
    (ivy-set-actions
     `counsel-find-file
     `(("j" find-file-other-frame "other frame")
       ("d" delete-file "delete")
       ("r" counsel-find-file-as-root "open as root")))
    (ivy-set-actions
     `ivy-switch-buffer
     `(("j" switch-to-buffer-other-frame "other frame")
       ("k" kill-buffer "kill")
       ("r" ivy--rename-buffer-action "rename")))
    (ivy-mode 1)
    )


  (use-package ivy-posframe
    :disabled t
    :after (ivy counsel swiper)
    
    :custom
    ;; (setq ivy-posframe-display-functions-alist `((t . ivy-posframe-display))
    ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
    (ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
    ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
    :config
    (ivy-posframe-mode 1)
    )
  #+END_SRC

Now I'm trying to figure out how to work with vertico.

#+BEGIN_SRC emacs-lisp
    (use-package vertico
      :ensure t
      :config
      (vertico-mode 1))
    (use-package vertico-posframe
      :disabled t
      :after (vertico posframe)
      :custom
      (vertico-posframe-parameters '((left-fringe . 8) (right-fringe . 8)))
      :config
      (vertico-posframe-mode 1)
      )
    (use-package orderless
      :ensure t
      :custom
      (completion-styles '(orderless basic))
      (matching-styles '(orderless flex))
      (completion-category-overrides '((file (styles basic partial-completion))))
      )
    (use-package embark)
    (use-package embark-consult
      :after (embark consult)
      :ensure t)
    (use-package marginalia
      :ensure t
      :config
      (marginalia-mode 1))

  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
  )


    (use-package corfu
      ;; Optional customizations
      ;; :custom
      ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      ;; (corfu-auto t)                 ;; Enable auto completion
      ;; (corfu-separator ?\s)          ;; Orderless field separator
      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
      ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
      ;; (corfu-preview-current nil)    ;; Disable current candidate preview
      ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
      ;; (corfu-scroll-margin 5)        ;; Use scroll margin

      ;; Enable Corfu only for certain modes.
      ;; :hook ((prog-mode . corfu-mode)
      ;;        (shell-mode . corfu-mode)
      ;;        (eshell-mode . corfu-mode))

      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.
      :init
      (global-corfu-mode)
      )

#+end_src

** Getting around Emacs
Perspectives and similar
#+begin_src emacs-lisp
  (use-package nameframe
    :disabled t
    )

  (use-package transient)

  (use-package persp-mode
    :after transient
    :custom
    (persp-autokill-buffer-on-remove 'kill-weak)
    (persp-state-default-file (concat user-emacs-directory (convert-standard-filename ".emacs-perspective-save")))
    :hook
    (emacs-startup . (lambda () (persp-mode 1)))
    (kill-emacs . persp-save-state-to-file)
    :config
    (transient-define-prefix pmw/persp-prefix ()
      "Perspective transient menu"
      ["Perspectives"
       [ "A"
        ("s" "create/switch perspective" persp-frame-switch)
        ("r" "rename perspective" persp-rename)
        ("c" "copy perspective" persp-copy)]
       [ "B"
  	("b" "switch to buffer in perspective" persp-switch-to-buffer)
  	("k" "remove buffer from perspective" persp-remove-buffer)]
       [ "C"
  	("n" "next perspective" persp-next)
  	("p" "previous perspective" persp-prev)
  	("o" "terminate persp-mode" (lambda () (interactive) (persp-mode -1)))]
       ]
      )
    :bind
    ("C-c p j" . pmw/persp-prefix)
    )  


  (use-package saveplace
    :config
    (save-place-mode 1)
    )

    (use-package multiple-cursors 
    :bind
    (("C-c z c"   . mc/edit-lines)
     ("C-c z <"   . mc/mark-next-like-this)
     ("C-c z >"   . mc/mark-previous-like-this)
     ("C-c z C-<" . mc/mark-all-like-this)))

    ;; dired+ / bookmark+ / desktop
  (use-package dired+
    :custom
    (diredp-hide-details-initially-flag nil)
    )

  (use-package bookmark+
    :disabled t
    :init
    (bmkp-last-as-first-bookmark-file (concat user-emacs-directory (convert-standard-filename "bookmarks")))
    :custom
    (bmkp-desktop-jump-save-before-flag t)
    :config
    (add-hook 'kill-emacs (progn
  			  (bmkp-desktop-save-as-last)))
    )

    (use-package cus-edit
    :straight (:type built-in)
    :custom
    (custom-file (concat user-emacs-directory (convert-standard-filename "custom.el")))
    :config
    (load-file custom-file)
    )

#+end_src


** Org and friends
#+begin_src emacs-lisp
    (use-package deft
    :disabled t
    :custom
    (deft-directory pmw/deft-directory)
    (deft-use-file-name-as-title t)
    (deft-use-filter-string-for-filename t)
    (deft-extension "org")
    (deft-default-extension "org")
    (deft-text-mode 'org-mode)
    )



  (use-package epa-file
    :straight (:type built-in)
    :config
    (epa-file-enable)
    )


  (use-package org-super-agenda
    :after org
    :custom
    (org-super-agenda-groups
     '(
       (:name "Radar"
  	    :todo ("ACTIVITY" "RADAR")
  	    :deadline nil)
       (:name "Deadlines"
  	    :deadline t)
       (:name "Undated"
  	    :todo ("TODO")
  	    :deadline nil)
       )))


  (use-package org
    :after epa-file 
    :bind
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    :custom
    (org-directory pmw/org-directory)
    (org-agenda-files (quote (concat pmw/org-directory (convert-standard-filename "journal.org"))))
    (org-agenda-show-all-dates nil)
    (org-agenda-prefix-format '((agenda . " %i %?-12t% s")
  			      (todo . " %?-12t% s")
  			      (tags . " %i %-12:c")
  			      (search . " %i %-12:c")))
    (org-crypt-key nil)
    (org-hide-emphasis-markers t)
    (org-refile-use-outline-path t)
    (org-refile-allow-creating-parent-nodes (quote confirm))
    (org-indirect-buffer-display 'current-window)
    (org-fontify-whole-heading-line t)
    (org-src-fontify-natively t)
    (org-log-into-drawer t)
    ;; set ditaa JAR path to work with org/babel (http://sourceforge.net/projects/ditaa/)
    (org-ditaa-jar-path pmw/org-ditaa-jar-directory)
    (org-tags-exclude-from-inheritance (quote ("crypt")))
    (org-todo-keywords '((sequence "TODO" "|" "DONE")
  		       (sequence "ACTIVITY" "PAUSED" "|" "COMPLETED" "ABANDONED")))
    (org-tag-alist '(("abet" . ?a)
  		   ("h4s" . ?h)
  		   ("pmem" . ?p)
  		   ("sandreport" . ?s)
  		   ("storage" . nil)
  		   ("hpda" . nil)
  		   ("rvma" . nil)
  		   ("sampra" . nil)
  		   ("data-mgt" . nil)
  		   ("faodel" . ?f)
  		   ("recruiting" . nil)))
    (org-capture-templates
     '(("t" "New TODO" entry (file+olp+datetree "journal.org")
        "* TODO %? %^g\n  %i\n  %a")
       ("j" "New journal" entry (file+olp+datetree "journal.org")
        "* %? %^g\n dated %t\n  %i\n  %a")))
    (org-agenda-custom-commands
     '(("P" "Agenda and radars"
        ((agenda ""
         ((org-agenda-span 15)))
         (todo "ACTIVITY")
         ))))
    ;; invoking this externally with
    ;;   /opt/local/bin/emacs -batch -l ~/.emacs.d/init.el -Q -eval '(org-batch-agenda "P")'

    :hook
    (org-mode . variable-pitch-mode)
    (org-mode . visual-line-mode)
    (org-mode . org-super-agenda-mode)
    :custom-face
    (org-block ((t (:inherit fixed-pitch))))
    (org-code ((t (:inherit (shadow fixed-pitch)))))
    (org-document-info ((t (:foreground "dark orange"))))
    (org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
    (org-document-title ((t (:inherit variable-pitch :height 2.0 :underline nil))))
    (org-indent ((t (:inherit (org-hide variable-pitch)))))
    (org-level-1 ((t (:inherit variable-pitch :height 1.5))))
    (org-level-2 ((t (:inherit variable-pitch :height 1.25))))
    (org-level-3 ((t (:inherit variable-pitch :height 1.1))))
    (org-level-4 ((t (:inherit variable-pitch :height 1.05))))
    (org-link ((t (:foreground "royal blue" :underline t))))
    (org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
    (org-property-value ((t (:inherit fixed-pitch :underline t))))
    (org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
    (org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
    (org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
    (org-verbatim ((t (:inherit (shadow fixed-pitch)))))

    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((R . t)
       (gnuplot . t)
       (dot . t)
       (ditaa . t)
       (latex . t)
       (ruby . t)
       (python . t)
       (emacs-lisp . t)
       (plantuml . t)
       ))
    (with-eval-after-load 'ox-latex
      (add-to-list 'org-latex-classes
  		 ;; beamer class, for presentations
  		 '("beamer")
  		 '("letter"
  		 "\\documentclass[11pt]{letter}\n
        \\usepackage[utf8]{inputenc}\n
        \\usepackage[T1]{fontenc}\n
        \\usepackage{color}"
  		 
  		 ("\\section{%s}" . "\\section*{%s}")
  		 ("\\subsection{%s}" . "\\subsection*{%s}")
  		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
  		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
    ;;
    (use-package ox-md :straight (:type built-in))
    (require 'org-crypt)
    (org-crypt-use-before-save-magic)
    ;;
    )

  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
  	(org-roam-capture-templates (list (append (car org-roam-capture-templates)
  						  '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

  (use-package org-roam
    :ensure t
    :after org
    :hook
    (after-init . org-roam-setup)
    (org-roam-backlinks-mode . visual-line-mode)
    :init
    (setq org-roam-v2-ack t
  	org-roam-database-connector 'sqlite-builtin)
    :custom
    (org-roam-directory pmw/org-roam-directory)
    (org-roam-tag-sources '(prop all-directories))
    (org-roam-dailies-directory "daily/")

    :bind (("C-c n l" . org-roam-buffer-toggle)
  	 ("C-c n f" . org-roam-node-find)
  	 ("C-c n g" . org-roam-graph)
  	 ("C-c n i" . org-roam-node-insert)
  	 ("C-c n I" . org-roam-node-insert-immediate)
  	 :map org-roam-dailies-map
  	 ("Y" . org-roam-dailies-capture-yesterday)
  	 ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-export)
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode)
    )

  (use-package org-roam-ui
    :ensure
    :straight (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :requires org-mode
    :after org-roam
    ;;:hook (after-init . org-roam-ui-mode)
    :custom
    (org-roam-ui-sync-theme t)
    (org-roam-ui-follow t)
    (org-roam-ui-update-on-save t)
    (org-roam-ui-open-on-start t)
    )

  (use-package org-download
    :after org
    :bind
    (:map org-mode-map
  	(("s-Y" . org-download-screenshot)
  	 ("s-y" . org-download-yank)))
    )

  (use-package org-modern
    :after org
    :config
    (setq
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-crtl-a/e t
     org-insert-heading-respect-content t

     org-hide-emphasis-markers t
     org-pretty-entities t
     org-ellipsis "..."
     )
    (global-org-modern-mode)
    )
     
    


  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max)))


  (defvar org-journal--date-location-scheduled-time nil)

  (defun org-journal-date-location (&optional scheduled-time)
    (let ((scheduled-time (or scheduled-time (org-read-date nil nil nil "Date:"))))
      (setq org-journal--date-location-scheduled-time scheduled-time)
      (org-journal-new-entry t (org-time-string-to-time scheduled-time))
      (unless (eq org-journal-file-type 'daily)
        (org-narrow-to-subtree))
      (goto-char (point-max))))

  (use-package org-journal
    :disabled f
    :custom
    (org-icalendar-store-UID t)
    (org-icalendar-include-todo "all")
    (org-icalendar-combined-agenda-file "~/org-journal.ics")
    )

  (use-package tablist)

  (use-package org-noter)

  (use-package htmlize
    :custom
    (org-html-htmlize-output-type 'css)
    (org-html-htmlize-font-prefix "org-"))

#+end_src

** Programming support
For me, this includes things like treemacs, magit, etc.

#+begin_src emacs-lisp
      (use-package magit
      :bind
      ("C-c g" . magit-status)
      :config
      (add-hook 'magit-mode #'magit-load-config-extensions)
      )

    (use-package git-messenger )
    (use-package git-gutter
      
      :custom
      (git-gutter:added-sign "+ ")
      (git-gutter:modified-sign "* ")
      (git-gutter:deleted-sign "- ")
      (git-gutter:lighter " GG")
      :config
      (global-git-gutter-mode 1)
      (git-gutter:linum-setup)
      )

    (use-package minimap
    :custom
    (minimap-window-location 'right)
    )
    
  (use-package shell-pop
    
    :custom
    (shell-pop-term-shell pmw/shell-command)
    (shell-pop-full-span t)
    (shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
    (shell-pop-window-position "bottom")
    (shell-pop-autocd-to-working-dir t)
    (shell-pop-universal-key "C-t")
    )

  (use-package vc
    :custom
    vc-follow-symlinks t)
    
    
  (use-package treemacs
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
    )

  (use-package treemacs-icons-dired
    :after treemacs dired
    
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    )

  (use-package treemacs-persp
    :after treemacs persp-mode
    
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package cmake-mode
    :mode
    (("CMakeLists\\.txt\\'" . cmake-mode)
     ("\\.cmake\\'" . cmake-mode))
    :init
    (defun cmake-rename-buffer ()
      "Renames a CMakeLists.txt buffer to cmake-<directory name>."
      (interactive)
  					;(print (concat "buffer-filename = " (buffer-file-name)))
  					;(print (concat "buffer-name     = " (buffer-name)))
      (when (and (buffer-file-name) (string-match "CMakeLists.txt" (buffer-name)))
  					;(setq file-name (file-name-nondirectory (buffer-file-name)))
        (setq parent-dir (file-name-nondirectory (directory-file-name (file-name-directory (buffer-file-name)))))
  					;(print (concat "parent-dir = " parent-dir))
        (setq new-buffer-name (concat "cmake-" parent-dir))
  					;(print (concat "new-buffer-name= " new-buffer-name))
        (rename-buffer new-buffer-name t)
        )
      )
    :hook (cmake-mode . cmake-rename-buffer)
    )

#+end_src



** Modes
#+begin_src emacs-lisp
    (use-package gnuplot-mode
    :mode 
    ("\\.\\(gp\\|gnuplot\\)$" . gnuplot-mode)
    )
  (use-package cc-mode
    :mode ("\\.h\\'" . c++-mode)
    :config
    (show-smartparens-mode 1)
    :hook
    (c-mode-common . display-line-numbers-mode)
    :custom-face 
    (line-number (( t :background "#FFFFFF")))
    )

  (use-package go-mode
    :mode "\\.go\\'")
  (use-package go-tag)
    
    
  (use-package markdown-mode
    :mode ("\\.\\(md\\|markdown\\)\\'" . markdown-mode))
  (use-package js2-mode
    :mode "\\.js\\'")
  (use-package rjsx-mode :mode "\\.jsx\\'")
  (use-package json-mode
    :mode "\\.json\\'")
  (use-package plantuml-mode
    :config
    (plantuml-default-exec-mode 'executable)
    (plantuml-executable-path "/opt/local/bin/plantuml")
    :mode "\\.uml\\'")
  (use-package yaml-mode
    :mode "\\.yaml\\'")
  (use-package haskell-mode
    :mode "\\.hs\\'")
  (use-package web-mode
    :mode ("\\.\\(html\\|htm\\)\\'" . wevb-mode))

  (use-package rustic
    :straight (:host github :repo "brotzeit/rustic")
    :mode 
    ("\\.\\(rs\\|rust\\)$" . rust-mode)

    )

  (use-package apples-mode
  :straight (:host github :repo "rprimus/apples-mode")
  )

  (use-package keycast
    :disabled nil
    :config
    (keycast-mode-line-mode 1))


#+end_src

** Odds and ends
#+begin_src emacs-lisp
    





  (use-package easy-jekyll
    
    :custom
    (easy-jekyll-basedir "~/Documents/pwidene.github.io/")
    (easy-jekyll-url "https://pwidene.github.io")
    (easy-jekyll-image-directory "assets")
    (easy-jekyll-default-picture-directory "~/Desktop")
    :bind
    ("C-c C-e" . easy-jekyll)
    )

    


  (use-package autoinsert
    :hook (find-file . auto-insert)
    )

  (use-package yasnippet
    :disabled t
    :custom
    (yas-prompt-functions '(yas-completing-prompt))
    :config
    (yas-reload-all)
    :hook
    (prog-mode  . yas-minor-mode))

  (use-package yasnippet-snippets
    :after yasnippet
    )

  (use-package recentf
    :custom
    (recentf-max-menu-items 25)
    (recentf-max-saved-items 25)
    :config
    (recentf-mode 1)
    (global-set-key "\C-x\ \C-r" 'recentf-open-files))


  (use-package gist)






  ;;
  ;; end of init.el
  ;;
#+end_src



